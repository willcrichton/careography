// Generated by CoffeeScript 1.8.0
(function() {
  define(function(require) {
    var COLOR_PRESETS, DELTA_THRESHOLD, getTime, lastSend, path, pathColor, sendPoint, socket, tool;
    requirejs.config({
      enforceDefine: true,
      inlineText: true,
      urlArgs: "bust={new Date().getTime()}"
    });
    paper.install(window);
    paper.setup('main');
    DELTA_THRESHOLD = 100;
    COLOR_PRESETS = [[0, 0, 0], [255, 0, 0], [0, 255, 0], [0, 0, 255], [255, 255, 0], [0, 255, 255], [255, 0, 255], [255, 255, 255]];
    socket = io('http://localhost');
    path = null;
    lastSend = null;
    pathColor = new Color(0, 0, 0);
    getTime = function() {
      return new Date().getTime();
    };
    sendPoint = function(args) {
      args.color = [pathColor.red, pathColor.green, pathColor.blue];
      return socket.emit('update', args);
    };
    tool = new Tool();
    tool.onMouseDown = function(event) {
      path = new Path();
      path.strokeColor = pathColor;
      path.strokeWidth = 5;
      path.add(event.point);
      lastSend = getTime();
      return sendPoint({
        x: event.point.x,
        y: event.point.y,
        start: true,
        delta: 0
      });
    };
    tool.onMouseDrag = function(event) {
      var time;
      path.add(event.point);
      time = getTime();
      if (time - lastSend > DELTA_THRESHOLD) {
        sendPoint({
          x: event.point.x,
          y: event.point.y,
          start: false,
          delta: time - lastSend
        });
        return lastSend = time;
      }
    };
    tool.onMouseUp = function() {
      return path.simplify(2.0);
    };
    return $(document).ready(function() {
      var $div, color, _i, _len;
      $('#colors').css('width', COLOR_PRESETS.length * 50);
      for (_i = 0, _len = COLOR_PRESETS.length; _i < _len; _i++) {
        color = COLOR_PRESETS[_i];
        $div = $('<div class="color"></div>');
        $div.css('background-color', 'rgb(' + color.join(',') + ')');
        $div.data('color', color);
        $('#colors').append($div);
      }
      $('.color').click(function() {
        return pathColor = new Color($(this).data('color').map(function(n) {
          return n / 255;
        }));
      });
      $('#splash').click(function() {
        if (document.body.webkitRequestFullscreen != null) {
          return document.body.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
        } else if (document.body.mozRequestFullScreen != null) {
          return document.body.mozRequestFullScreen();
        }
      });
      return $(document).on('fullscreenchange mozfullscreenchange webkitfullscreenchange', function() {
        $('#canvas').css({
          opacity: '0.01',
          display: 'block'
        });
        return setTimeout(function() {
          $('#splash').fadeOut(1000);
          return $('#canvas').animate({
            opacity: 1
          }, 1000);
        }, 1000);
      });
    });
  });

}).call(this);
